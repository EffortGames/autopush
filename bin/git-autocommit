#!/usr/bin/env bash
#
# Stages the local directory and commits using an autogenerated message.
#
set -e
set -o pipefail

function print() {
  COLOR='\033[0;36m'
  COLOR_END='\033[0m'
  printf -- "-- $COLOR$1$COLOR_END\n"
}

print "staging changes"
git add "$(git rev-parse --show-toplevel)"

files=$(git diff --name-only --cached)
files_count=$(echo "${files}" | wc -l)
if [ "${files_count}" == "0" ]; then
  echo "Nothing to commit"
  exit 0
fi

message="Updated $(echo "${files}" | paste -s -d", " -)"

# if there is a large amount of files, use a shorter message
if [ "${files_count}" -gt "2" ]; then
  directories=$(echo "${files}" | xargs -I {} dirname {} | sort | uniq -c | sort -nr | awk '{print $2}')
  directories_count=$(echo "${directories}" | wc -l)
  if [ "${directories_count}" -gt "2" ]; then
    message="Updated multiple files"
  else
    message="Updated $(echo "${directories}/" | paste -s -d"/, " -)"
  fi
fi

# replace /./ with / (if any)
message=$(echo "${message}" | sed 's#/\.\/#/#g')

print "committing changes"

if [ -f ~/.autopush.yml ]; then
  filter=$(yq '.aicommits.filter' ~/.autopush.yml)
  if git remote get-url origin | grep -E -q "${filter}"; then
    aicommits --type conventional
    exit 0
  fi
fi

git commit --message "$(git prefix) ${message}" || true
